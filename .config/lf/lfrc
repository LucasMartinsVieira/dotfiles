# Basic Settings
set hidden true
set ignorecase true
set previewer ~/.config/lf/preview
set cleaner ~/.config/lf/cleaner

# Custom Functions
cmd mkdir ${{
  printf "Directory Name: "
  read ans
  mkdir $ans
}}

cmd mkfile ${{
  printf "File Name: "
  read ans
  /usr/bin/nvim $ans
}}

# Archive bindings
cmd unarchive ${{
  case "$f" in
      *.zip) unzip "$f" ;;
      *.tar.gz) tar -xzvf "$f" ;;
      *.tar.bz2) tar -xjvf "$f" ;;
      *.tar) tar -xvf "$f" ;;
      *) echo "Unsupported format" ;;
  esac
}}

cmd zip %zip -r "$f" "$f"
cmd tar %tar cvf "$f.tar" "$f"
cmd targz %tar cvzf "$f.tar.gz" "$f"
cmd tarbz2 %tar cjvf "$f.tar.bz2" "$f"

# Wallpaper 
cmd setwallpaper $feh --bg-scale --no-fehbg "$f"

cmd fzf_configs ${{
  $HOME/.config/lf/editconf
}}

# Trash cli bindings
cmd trash ${{
  files=$(printf "$fx" | tr '\n' ';')
  while [ "$files" ]; do
    # extract the substring from start of string up to delimiter.
    # this is the first "element" of the string.
    file=${files%%;*}

    trash-put "$(basename "$file")"
    # if there's only one element left, set `files` to an empty string.
    # this causes us to exit this `while` loop.
    # else, we delete the first "element" of the string from files, and move onto the next.
    if [ "$files" = "$file" ]; then
      files=''
    else
      files="${files#*;}"
    fi
  done
}}

cmd clear_trash %trash-empty

cmd restore_trash ${{
  trash-restore
}}


# Bindings
# Removing default Bindings
map m
map e
map i
map d

# Basic Functions
map . set hidden!
map md mkdir
map mf mkfile
map sw setwallpaper
map o fzf_configs
map mv cut

# Trash cli bindings
map dd trash
map dc clear_trash
map dr restore_trash

# Applications
map ee $nvim "$f"
map ed $doas nvim "$f"
map i $devour feh "$f"
map Z $devour zathura "$f"
map M $devour mpv "$f"

# Archive mappings
map az zip
map at tar
map ag targz
map ab targz
map au unarchive

# Git
cmd gitadd $git add "$f"
cmd gitpush $git push

cmd gitcommit ${{
  printf "Commit Message: "
  read ans
  git commit -m "$ans"
}}

map gta gitadd
map gtc gitcommit
map gtp gitpush

# Movement
map gdc cd ~/Documentos
map gdw cd ~/Downloads

map gi. cd ~/Imagens/
map giw cd ~/Imagens/Wallpapers/
map gis cd ~/Imagens/Screenshot/

map gc cd ~/.config/
map g/ cd /
map gE cd /etc/
map gu cd /usr/
map gUs cd /usr/share/
map gUb cd /usr/local/bin/
map gRM cd /run/media/

# Repos bindings
map gr. cd ~/repos/
map grd cd ~/repos/dotfiles/
map grl cd ~/repos/LucasMartinsVieira/
map grs cd ~/repos/scripts/
map grc cd ~/repos/clones/

# Dev bindings
map gv. cd ~/dev/
map gvc cd ~/dev/c/
map gvh cd ~/dev/html/
map gvr cd ~/dev/rust/
map gvp cd ~/dev/php/

# Media bindings
map gm. cd ~/Media/
map gmm cd ~/Media/Manga/
map gma cd ~/Media/Animes/
map gmf cd ~/Media/Filmes/
map gml cd ~/Media/Livros/
map gms cd ~/Media/Series/

# Books bindings
map gb. cd ~/Media/Livros/
map gbe cd ~/Media/Livros/Estudos/
map gbE cd ~/Media/Livros/Estória/
map gbb cd ~/Media/Livros/Biografia/
map gbh cd ~/Media/Livros/História/
map gbn cd ~/Media/Livros/Negócios/


# VimWiki bindings
map gw. cd ~/Documentos/vimwiki/
map gwi $nvim ~/Documentos/vimwiki/index.md
map gwn $nvim ~/Documentos/vimwiki/Notes.md
